---
import '../styles/main.css';
import HeaderMega from '../components/header/header-mega/Header.astro';
import { MegaMenuIcon } from '../components/MegaMenuIcons.tsx';
import { SECTIONS_META, type Section } from '../data/sections';
import { loadT, getLangFromUrl, type Locale } from '../i18n';

export interface Props {
  title?: string;
  description?: string;
  active?: string;
  lang?: Locale;
}

const { title = 'Components | Starter UI', description = 'Browse all components and sections from a clean dashboard', active = 'heroes', lang: langProp } = Astro.props as Props;
const lang: Locale = langProp ?? getLangFromUrl(Astro.url);
const t = await loadT(lang);
const withLang = (path: string) => `/${lang}${path}`;
---

<HeaderMega lang={lang} />

<main class="main">
  <section class="sections-dashboard">
    <div class="sections-layout">
      <aside class="sections-sidebar" id="sections-sidebar">
          <div class="sections-sidebar-header">
            <h2>{t('componentsDashboard.title')}</h2>
          </div>
          <nav class="sections-nav" aria-label="Components navigation">
            <div class="sections-group">
              <h3 class="sections-group-title"><span class="group-icon"><MegaMenuIcon name="Layout" size={12} client:load /></span> {t('componentsDashboard.groups.elements')}</h3>
              <ul class="sections-list">
                {(() => {
                  const order: Section[] = ['headers','footers','buttons','badges','pills','cards','errors'];
                  return order.map((s) => (
                    <li>
                      <a class={`sections-link ${active === s ? 'active' : ''}`} href={withLang(`/components/${s}`)} aria-current={active === s ? 'page' : undefined}>{t(`sections.${s}.label`)}</a>
                    </li>
                  ));
                })()}
              </ul>
            </div>
            <div class="sections-group">
              <h3 class="sections-group-title"><span class="group-icon"><MegaMenuIcon name="Layers" size={12} client:load /></span> {t('componentsDashboard.groups.sections')}</h3>
              <ul class="sections-list">
                {(() => {
                  const order: Section[] = ['heroes','features','ctas','pricing','faqs','testimonials','services','logo-clouds','gallery'];
                  return order.map((s) => (
                    <li>
                      <a class={`sections-link ${active === s ? 'active' : ''}`} href={withLang(`/components/${s}`)} aria-current={active === s ? 'page' : undefined}>{t(`sections.${s}.label`)}</a>
                    </li>
                  ));
                })()}
              </ul>
            </div>
          </nav>
      </aside>

      <section class="sections-content">
        <slot />
      </section>
    </div>
  </section>
</main>

<style>
  :global(.header-mega .container) { max-width: 100%; padding-left: var(--space-4); padding-right: var(--space-4); }
  .sections-dashboard { padding: 0; background: var(--color-background); }
  .sections-layout { position: relative; min-height: auto; }

  .sections-sidebar { position: fixed; top: 0; left: 0; width: 280px; height: 100vh; background: var(--color-background); border-right: 1px solid rgba(0,0,0,0.08); backdrop-filter: blur(6px); -webkit-backdrop-filter: blur(6px); padding: 96px 16px 16px; z-index: 900; overflow-y: auto; overscroll-behavior: contain; }
  .sections-sidebar-header { padding: 4px 8px 12px; border-bottom: 1px solid rgba(0,0,0,0.08); margin-bottom: 12px; }
  /* Más aire entre el título "Components" y el primer bloque */
  .sections-sidebar-header { padding: 6px 8px 16px; margin-bottom: 20px; }
  .sections-sidebar-header h2 { font-size: 14px; margin: 0; color: rgba(0,0,0,0.7); font-weight: 600; letter-spacing: 0.02em; }

  /* Más separación entre bloques y mejor jerarquía */
  .sections-nav { display: flex; flex-direction: column; gap: 32px; position: relative; }
  /* Sin rail continuo (pedido) */
  .sections-nav::before { content: none; }
  .sections-group { display: flex; flex-direction: column; gap: 10px; }
  .sections-group-title { font-size: 12px; letter-spacing: 0.14em; color: rgba(0,0,0,0.55); margin: 0; text-transform: uppercase; font-weight: 600; padding-left: 16px; }
  .sections-list { list-style: none; padding: 0; margin: 0; display: flex; flex-direction: column; gap: 6px; }
  /* Indentación de items y marcador activo sobre el rail */
  .sections-list li { position: relative; padding-left: 16px; }
  .sections-link { position: relative; text-align: left; background: transparent; border: 0; padding: 10px 10px; padding-left: 12px; border-radius: var(--radius-md); font-size: 14px; color: rgba(0,0,0,0.72); cursor: pointer; transition: color 0.2s ease; text-decoration: none; display: inline-block; }
  .sections-link:hover { color: rgba(0,0,0,0.85); }
  .sections-link:focus-visible { outline: 2px solid rgba(0,0,0,0.35); outline-offset: 2px; box-shadow: 0 0 0 3px rgba(0,0,0,0.08); }
  /* Estado activo sutil: sin negrita, solo tono y marca fina */
  .sections-link.active { color: rgba(0,0,0,0.9); font-weight: 500; }
  .sections-link.active::before { content: ""; position: absolute; left: -14px; top: 10px; bottom: 10px; width: 2px; background: rgba(0,0,0,0.35); border-radius: 2px; }
  .group-icon { display:inline-flex; align-items:center; justify-content:center; width: 16px; height: 16px; margin-right: 6px; color: rgba(0,0,0,0.55); }
  .sections-link:hover { background: var(--color-hover); }
  .sections-link.active { background: rgba(0,0,0,0.08); color: var(--color-black); }

  .sections-content { overflow: hidden; margin-left: 280px; }

  @media (max-width: 1024px) {
    .sections-sidebar { width: 240px; }
    .sections-content { margin-left: 240px; }
  }

  @media (max-width: 768px) {
    .sections-sidebar { position: relative; top: 0; left: 0; width: 100%; height: auto; border-right: 0; border-bottom: 1px solid rgba(0,0,0,0.08); padding: 16px; }
    .sections-content { margin-left: 0; }
  }
</style>


