---
import ButtonLink from '../../buttons/link/ButtonLink.astro';
import { type Locale, loadT } from '../../../i18n';

interface Props {
  lang: Locale;
}

const { lang } = Astro.props;
const t = await loadT(lang, ['about']);

const title = t('title');
const description = t('description');
const button1Text = t('buttons.team');
const button2Text = t('buttons.services');
const button1Href = `/${lang}/despacho`;
const button2Href = `#services-section`;
---

<script>
  // Animated text effect
  function initAnimatedText() {
    const section = document.querySelector('.about-split');
    const titleElement = document.getElementById('about-animated-title');
    
    if (!section || !titleElement) return;
    
    let progress = 0;
    let originalText = titleElement.textContent;
    
    const handleScroll = () => {
      const rect = section.getBoundingClientRect();
      const windowHeight = window.innerHeight;
      
      // Calcular el progreso basado en la posición del elemento
      const elementTop = rect.top;
      
      // Empezar la animación antes y hacerla más rápida
      const startOffset = windowHeight * 0.8; // Empezar cuando esté al 80% del viewport
      const endOffset = windowHeight * 0.2; // Terminar cuando esté al 20% del viewport
      
      if (elementTop <= startOffset && elementTop >= endOffset) {
        const totalDistance = startOffset - endOffset;
        const currentDistance = startOffset - elementTop;
        const scrollProgress = Math.min(Math.max(currentDistance / totalDistance, 0), 1);
        progress = scrollProgress;
      } else if (elementTop > startOffset) {
        progress = 0;
      } else if (elementTop < endOffset) {
        progress = 1;
      }
      
      // Aplicar animación al texto
      animateText(titleElement, progress, originalText);
    };
    
    const animateText = (element, progress, text) => {
      const words = text.split(' ');
      const totalWords = words.length;
      
      let animatedHTML = '';
      
      for (let i = 0; i < words.length; i++) {
        const wordProgress = Math.min(Math.max((progress * totalWords) - i, 0), 1);
        
        // Colores: de gris oscuro (inicial) a negro (final)
        const startColor = 100; // gris oscuro
        const endColor = 0;     // negro
        const startAlpha = 0.4; // translúcido al inicio
        const endAlpha = 1;     // opaco al final
        
        const currentColor = Math.round(startColor + (endColor - startColor) * wordProgress);
        const currentAlpha = Math.max(0, Math.min(1, startAlpha + (endAlpha - startAlpha) * wordProgress));
        
        animatedHTML += `<span style="color: rgba(${currentColor}, ${currentColor}, ${currentColor}, ${currentAlpha}); transition: color 0.1s ease;">${words[i]}</span>`;
        
        // Añadir espacio entre palabras (excepto en la última palabra)
        if (i < words.length - 1) {
          animatedHTML += ' ';
        }
      }
      
      element.innerHTML = animatedHTML;
    };
    
    window.addEventListener('scroll', handleScroll, { passive: true });
    handleScroll(); // Ejecutar una vez para el estado inicial
  }
  
  // Inicializar cuando el DOM esté listo
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initAnimatedText);
  } else {
    initAnimatedText();
  }

  // Animaciones fade in up escalonadas para About
  document.addEventListener('DOMContentLoaded', function() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Añadir delay escalonado
          if (entry.target.classList.contains('about-split-header')) {
            setTimeout(() => {
              entry.target.classList.add('animate');
            }, 100);
          } else if (entry.target.classList.contains('about-split-bottom')) {
            setTimeout(() => {
              entry.target.classList.add('animate');
            }, 200);
          } else {
            entry.target.classList.add('animate');
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observar elementos con animación del About
    const aboutAnimatedElements = document.querySelectorAll('.about-animate');
    aboutAnimatedElements.forEach(el => {
      observer.observe(el);
    });
  });
</script>

<section class="about-split">
  <div class="about-split-container">
    <div class="about-split-content">
      <div class="about-split-header about-animate">
        <h2 class="about-split-title" id="about-animated-title">{title}</h2>
      </div>
      
      <div class="about-split-bottom about-animate">
        <div class="about-split-description-container">
          <p class="about-split-description">{description}</p>
          <div class="about-split-buttons">
            <ButtonLink href={button1Href}>{button1Text}</ButtonLink>
            <ButtonLink href={button2Href}>{button2Text}</ButtonLink>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .about-split {
    background-color: var(--color-background-alt);
    padding: var(--space-8) 0;
  }

  /* Animaciones fade in up */
  .about-animate {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .about-animate.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .about-split-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 var(--space-4);
    overflow: hidden;
  }

  .about-split-content {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
  }

  .about-split-header {
    flex: 1;
    display: flex;
    align-items: flex-start;
    max-width: 80%;
  }

  .about-split-title {
    font-size: 56px;
    line-height: 67px;
    font-weight: 300;
    color: var(--color-text);
    margin: 0;
    max-width: 800px;
    word-wrap: break-word;
    overflow-wrap: break-word;
  }

  .about-split-bottom {
    flex: 1;
    display: flex;
    justify-content: flex-end;
    align-items: flex-end;
  }

  .about-split-description-container {
    max-width: 500px;
    text-align: left;
  }

  .about-split-description {
    font-size: 16px;
    line-height: 1.6;
    color: var(--color-text-secondary);
    margin: 0 0 var(--space-6) 0;
  }

  .about-split-buttons {
    display: flex;
    gap: var(--space-4);
    flex-wrap: wrap;
  }

  /* Responsive */
  @media (max-width: 1024px) {
    
    .about-split-title {
      font-size: 42px;
      line-height: 50px;
      max-width: 100%;
    }
    
    .about-split-bottom {
      justify-content: flex-start;
    }
    
    .about-split-description-container {
      max-width: 100%;
    }
  }

  @media (max-width: 768px) {
    .about-split {
      padding: var(--space-6) 0;
    }
    
    .about-split-content {
      gap: var(--space-6);
    }
    
    .about-split-title {
      font-size: 32px;
      line-height: 40px;
    }
    
    .about-split-description {
      font-size: 16px;
      line-height: 1.5;
    }
    
    .about-split-buttons {
      flex-direction: column;
      gap: var(--space-3);
      align-items: flex-start;
    }
  }

  @media (max-width: 480px) {
    .about-split {
      padding: var(--space-4) 0;
    }
    
    .about-split-content {
      gap: var(--space-4);
    }
    
    .about-split-title {
      font-size: 26px;
      line-height: 34px;
    }
    
    .about-split-description {
      font-size: 15px;
      line-height: 1.4;
    }
    
    .about-split-buttons {
      gap: var(--space-2);
    }
  }
</style>
