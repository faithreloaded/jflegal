---
import './SimpleGallery.css';
---

<section class="simple-gallery-section">
  <div class="container">
    <header class="simple-gallery-header">
      <span class="section-pill gallery-header-item">Gallery</span>
      <h2 class="simple-gallery-title gallery-header-item">Visual Showcase</h2>
      <p class="simple-gallery-description gallery-header-item">
        A subtle and clean image gallery to present your work with clarity
      </p>
    </header>

    <div class="simple-gallery-grid" id="simple-gallery-grid">
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/placeholder.jpg" alt="Item 1" data-index="0" /></figure>
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/paceholder2.jpg" alt="Item 2" data-index="1" /></figure>
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/placeholder.jpg" alt="Item 3" data-index="2" /></figure>
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/paceholder2.jpg" alt="Item 4" data-index="3" /></figure>
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/placeholder.jpg" alt="Item 5" data-index="4" /></figure>
      <figure class="simple-gallery-item"><img src="/images/images/placeholder/paceholder2.jpg" alt="Item 6" data-index="5" /></figure>
    </div>
  </div>

  <!-- Lightbox Modal -->
  <div class="simple-lightbox" id="simple-lightbox" aria-hidden="true" role="dialog" aria-modal="true">
    <div class="simple-lightbox-backdrop" data-close></div>
    <div class="simple-lightbox-dialog" role="document">
      <button class="simple-lightbox-close" type="button" aria-label="Close" data-close>&times;</button>
      <button class="simple-lightbox-prev" type="button" aria-label="Previous" data-prev>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="15 18 9 12 15 6"/></svg>
      </button>
      <button class="simple-lightbox-next" type="button" aria-label="Next" data-next>
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="9 18 15 12 9 6"/></svg>
      </button>
      <div class="simple-lightbox-content">
        <img id="simple-lightbox-image" alt="Preview" />
      </div>
      <div class="simple-lightbox-counter" id="simple-lightbox-counter"></div>
    </div>
  </div>
</section>

<script>
  // Staggered animation for header and items
  document.addEventListener('DOMContentLoaded', function() {
    const headerItems = document.querySelectorAll('.gallery-header-item');
    const items = document.querySelectorAll('.simple-gallery-item');

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate');
        }
      });
    }, { threshold: 0.15, rootMargin: '0px 0px -60px 0px' });

    headerItems.forEach((el, idx) => {
      el.style.transitionDelay = `${idx * 100}ms`;
      observer.observe(el);
    });

    items.forEach((el, idx) => {
      el.style.transitionDelay = `${150 + idx * 100}ms`;
      observer.observe(el);
    });

    // Lightbox logic
    const grid = document.getElementById('simple-gallery-grid');
    const lightbox = document.getElementById('simple-lightbox');
    const imgEl = document.getElementById('simple-lightbox-image');
    const counterEl = document.getElementById('simple-lightbox-counter');
    const btnPrev = lightbox.querySelector('[data-prev]');
    const btnNext = lightbox.querySelector('[data-next]');
    const closeEls = lightbox.querySelectorAll('[data-close]');

    const images = Array.from(grid.querySelectorAll('img'));
    let currentIndex = 0;

    function updateCounter() {
      counterEl.textContent = `${currentIndex + 1} / ${images.length}`;
    }

    function openLightbox(index) {
      currentIndex = index;
      imgEl.src = images[currentIndex].src;
      updateCounter();
      lightbox.setAttribute('aria-hidden', 'false');
      document.documentElement.style.overflow = 'hidden';
      setTimeout(() => lightbox.classList.add('open'), 0);
    }

    function closeLightbox() {
      lightbox.classList.remove('open');
      lightbox.setAttribute('aria-hidden', 'true');
      document.documentElement.style.overflow = '';
    }

    function showNext() {
      currentIndex = (currentIndex + 1) % images.length;
      imgEl.src = images[currentIndex].src;
      updateCounter();
    }

    function showPrev() {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      imgEl.src = images[currentIndex].src;
      updateCounter();
    }

    grid.addEventListener('click', (e) => {
      const target = e.target;
      if (target && target.tagName === 'IMG') {
        const index = Number(target.getAttribute('data-index')) || images.indexOf(target);
        openLightbox(index);
      }
    });

    btnNext.addEventListener('click', showNext);
    btnPrev.addEventListener('click', showPrev);
    closeEls.forEach(el => el.addEventListener('click', closeLightbox));

    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) closeLightbox();
    });

    document.addEventListener('keydown', (e) => {
      if (lightbox.getAttribute('aria-hidden') === 'true') return;
      if (e.key === 'Escape') closeLightbox();
      if (e.key === 'ArrowRight') showNext();
      if (e.key === 'ArrowLeft') showPrev();
    });
  });
</script>


