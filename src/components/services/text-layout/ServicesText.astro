---
import { type Locale, loadT } from '../../../i18n';

interface Props {
  lang: Locale;
}

const { lang } = Astro.props;
const t = await loadT(lang, ['services']);

const title = t('title');
const description = t('description');
const buttonText = t('buttonText');

// Construir array de servicios desde las traducciones
const services = [
  {
    name: t('services.fiscal.title'),
    description: t('services.fiscal.description'),
    number: t('services.fiscal.number'),
    slug: 'fiscal'
  },
  {
    name: t('services.laboral.title'),
    description: t('services.laboral.description'),
    number: t('services.laboral.number'),
    slug: 'laboral'
  },
  {
    name: t('services.mercantil.title'),
    description: t('services.mercantil.description'),
    number: t('services.mercantil.number'),
    slug: 'mercantil-societario'
  },
  {
    name: t('services.sucesiones.title'),
    description: t('services.sucesiones.description'),
    number: t('services.sucesiones.number'),
    slug: 'sucesiones'
  }
];
---

<script>
  // Animaciones fade in up escalonadas para Services
  document.addEventListener('DOMContentLoaded', function() {
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          // Añadir delay escalonado
          if (entry.target.classList.contains('services-text-left')) {
            setTimeout(() => {
              entry.target.classList.add('animate');
            }, 100);
          } else if (entry.target.classList.contains('services-text-item')) {
            // Para los items de servicios, usar el delay CSS existente
            const delay = entry.target.style.getPropertyValue('--delay') || '0s';
            const delayMs = parseFloat(delay) * 1000 + 200; // Convertir a ms y añadir 200ms base
            setTimeout(() => {
              entry.target.classList.add('animate');
            }, delayMs);
          } else {
            entry.target.classList.add('animate');
          }
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Observar elementos con animación de Services
    const servicesAnimatedElements = document.querySelectorAll('.services-animate');
    servicesAnimatedElements.forEach(el => {
      observer.observe(el);
    });
  });
</script>

<section class="services-text" id="services-section">
  <div class="container">
    <div class="services-text-layout">
      <div class="services-text-left services-animate">
        <h2 class="services-text-title">{title}</h2>
        <p class="services-text-description-main">
          Especialistas en asesoramiento legal integral para empresas y particulares. 
          Ofrecemos soluciones personalizadas en las áreas de derecho fiscal, laboral, 
          mercantil y sucesiones, adaptadas a las necesidades específicas de cada cliente.
        </p>
      </div>
      
      <div class="services-text-right">
        {services.map((service, index) => (
          <div class="services-text-item services-animate" style={`--delay: ${index * 0.1}s;`}>
            <div class="services-text-item-header">
              <span class="services-text-number">{service.number}</span>
              <h3 class="services-text-service">{service.name}</h3>
            </div>
            <p class="services-text-description">{service.description}</p>
            <div class="services-text-item-cta">
              <a href={`/${lang}/servicios/${service.slug}`} class="services-text-link">
                VER MÁS
              </a>
            </div>
            {index < services.length - 1 && <hr class="services-text-separator" />}
          </div>
        ))}
      </div>
    </div>
  </div>
</section>

<style>
  .services-text {
    padding: var(--space-8) 0;
    background-color: #ffffff;
    position: relative;
  }


  .services-text-layout {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: var(--space-8);
    align-items: start;
  }

  .services-text-left {
    display: flex;
    flex-direction: column;
    gap: var(--space-6);
    position: sticky;
    top: 140px;
    height: fit-content;
  }

  .services-text-title {
    font-size: 48px;
    font-weight: 400;
    color: var(--color-text);
    margin: 0;
    text-align: left;
    letter-spacing: -0.5px;
    line-height: 1.1;
  }

  .services-text-description-main {
    font-size: 18px;
    color: var(--color-text-secondary);
    margin: 0;
    line-height: 1.6;
    font-weight: 400;
  }

  .services-text-right {
    display: flex;
    flex-direction: column;
    gap: 0;
  }

  /* Animaciones fade in up */
  .services-animate {
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .services-animate.animate {
    opacity: 1;
    transform: translateY(0);
  }

  .services-text-item {
    padding: var(--space-6) 0;
  }

  .services-text-item-header {
    display: flex;
    align-items: center;
    gap: var(--space-3);
    margin-bottom: var(--space-3);
  }

  .services-text-number {
    font-size: 14px;
    font-weight: 400;
    color: var(--color-text-secondary);
    background: rgba(0, 0, 0, 0.05);
    padding: 4px 8px;
    border-radius: 0px;
    min-width: 32px;
    text-align: center;
  }

  .services-text-service {
    font-size: 24px;
    font-weight: 400;
    color: var(--color-text);
    margin: 0;
    letter-spacing: -0.2px;
    line-height: 1.2;
  }

  .services-text-description {
    font-size: 16px;
    color: var(--color-text-secondary);
    margin: 0;
    line-height: 1.6;
    font-weight: 400;
  }

  .services-text-separator {
    border: none;
    height: 1px;
    background-color: rgba(0, 0, 0, 0.1);
    margin: var(--space-6) 0 0 0;
  }

  .services-text-item-cta {
    margin-top: var(--space-4);
    display: flex;
    justify-content: flex-end;
  }

  .services-text-link {
    color: var(--color-text);
    text-decoration: none;
    font-size: 14px;
    font-weight: 400;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    transition: all 0.3s ease;
    display: inline-block;
    position: relative;
  }

  .services-text-link::after {
    content: '';
    position: absolute;
    width: 0;
    height: 1px;
    bottom: -2px;
    left: 0;
    background-color: var(--color-text);
    transition: width 0.3s ease;
  }

  .services-text-link:hover::after {
    width: 100%;
  }



  /* Responsive */
  @media (max-width: 1024px) {
    .services-text-title {
      font-size: 40px;
    }
    
    .services-text-layout {
      gap: var(--space-6);
    }
  }

  @media (max-width: 768px) {
    .services-text {
      padding: var(--space-4) 0;
    }
    
    .services-text-title {
      font-size: 36px;
    }
    
    .services-text-layout {
      grid-template-columns: 1fr;
      gap: var(--space-4);
    }
    
    .services-text-left {
      gap: var(--space-3);
    }
    
    .services-text-item {
      padding: var(--space-3) 0;
    }
    
    .services-text-service {
      font-size: 20px;
    }
    
    .services-text-description {
      font-size: 15px;
    }
    
    .services-text-description-main {
      font-size: 16px;
    }
    
    .services-text-left {
      position: static;
    }
    
    .services-text-item-cta {
      justify-content: flex-start;
    }
  }

  @media (max-width: 480px) {
    .services-text {
      padding: var(--space-3) 0;
    }
    
    .services-text-layout {
      gap: var(--space-3);
    }
    
    .services-text-item {
      padding: var(--space-2) 0;
    }
    
    .services-text-title {
      font-size: 32px;
    }
    
    .services-text-service {
      font-size: 18px;
    }
    
    .services-text-description {
      font-size: 14px;
    }
    
    .services-text-description-main {
      font-size: 15px;
    }
  }
</style>
