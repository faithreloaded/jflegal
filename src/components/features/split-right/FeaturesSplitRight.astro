---
import './FeaturesSplitRight.css';
import { type Locale, loadT } from '../../../i18n';

interface Props {
  lang: Locale;
}

const { lang } = Astro.props;
const t = await loadT(lang, ['features']);

// Fallback translations para features si el sistema no funciona
const featuresFallback = {
  es: {
    mercantil: {
      title: "Nuestra filosofía",
      subtitle: "Trabajamos desde la transparencia, el análisis y la confianza.",
      sections: {
        constitucion: {
          title: "No buscamos acumular clientes, sino relaciones duraderas basadas en resultados y buen trato.",
          description: ""
        },
        contratacion: {
          title: "Nos implicamos personalmente en cada expediente, asegurando que cada paso tenga sentido legal y humano.",
          description: ""
        }
      },
      additional: "Nuestra filosofía\nTrabajamos desde la transparencia, el análisis y la confianza.\n\nNo buscamos acumular clientes, sino relaciones duraderas basadas en resultados y buen trato.\n\nNos implicamos personalmente en cada expediente, asegurando que cada paso tenga sentido legal y humano."
    }
  },
  en: {
    mercantil: {
      title: "How we help you",
      subtitle: "At JF Legal we accompany both companies and families in the key moments of their activity or assets.",
      sections: {
        constitucion: {
          title: "We advise entrepreneurs who start their project, companies that need to reorganize or resolve conflicts between partners, and families who seek to plan their inheritance with legal security and tax efficiency.",
          description: ""
        },
        contratacion: {
          title: "We also provide continuous support in accounting, tax and labor matters, ensuring regulatory compliance and helping to optimize resources.",
          description: ""
        }
      },
      additional: "Our philosophy\nWe work from transparency, analysis and trust.\n\nWe don't seek to accumulate clients, but lasting relationships based on results and good treatment.\n\nWe get personally involved in each case, ensuring that every step has legal and human meaning."
    }
  },
  ca: {
    mercantil: {
      title: "Com t'ajudem",
      subtitle: "A JF Legal acompanyem tant a empreses com a famílies en els moments clau de la seva activitat o patrimoni.",
      sections: {
        constitucion: {
          title: "Assessorem a emprenedors que inicien el seu projecte, a societats que necessiten reorganitzar-se o resoldre conflictes entre socis, i a famílies que busquen planificar la seva herència amb seguretat jurídica i eficiència fiscal.",
          description: ""
        },
        contratacion: {
          title: "També prestem suport continu en matèria comptable, fiscal i laboral, garantint el compliment normatiu i ajudant a optimitzar recursos.",
          description: ""
        }
      },
      additional: "La nostra filosofia\nTreballam des de la transparència, l'anàlisi i la confiança.\n\nNo busquem acumular clients, sinó relacions duradores basades en resultats i bon tracte.\n\nEns implicam personalment en cada expedient, assegurant que cada pas tingui sentit legal i humà."
    }
  }
};

// Función helper para obtener traducciones de features con fallback
function getFeaturesTranslation(key: string) {
  const translation = t(`features.${key}`);
  if (translation === `features.${key}`) {
    // Si no se encuentra la traducción, usar fallback
    const keys = key.split('.');
    let value = featuresFallback[lang];
    for (const k of keys) {
      value = value?.[k];
    }
    return value || key;
  }
  return translation;
}

const title = getFeaturesTranslation('mercantil.title');
const subtitle = getFeaturesTranslation('mercantil.subtitle');
const constitucionTitle = getFeaturesTranslation('mercantil.sections.constitucion.title');
const constitucionDescription = getFeaturesTranslation('mercantil.sections.constitucion.description');
const contratacionTitle = getFeaturesTranslation('mercantil.sections.contratacion.title');
const contratacionDescription = getFeaturesTranslation('mercantil.sections.contratacion.description');
const additional = getFeaturesTranslation('mercantil.additional');
---

<section class="features-split-section">
  <div class="container">
    <div class="features-split-grid">
      <!-- Left Column - Content -->
      <div class="features-split-content features-split-animate">
        <!-- First Container: Title + CTA -->
        <div class="features-split-header features-split-animate">
          <h2 class="features-split-title features-split-animate">{title}</h2>
          <div class="features-split-cta features-split-animate">
            <p>{subtitle}</p>
          </div>
        </div>

        <!-- Second Container: Content Items -->
        <div class="features-split-items-container features-split-animate">
          <div class="features-split-item features-split-animate">
            <p class="features-split-description features-split-animate">
              {constitucionTitle}
            </p>
          </div>

          <div class="features-split-item features-split-animate">
            <p class="features-split-description features-split-animate">
              {contratacionTitle}
            </p>
          </div>

          <div class="features-split-cta features-split-animate">
            <p>{additional}</p>
          </div>
        </div>
      </div>

      <!-- Right Column - Image -->
      <div class="features-split-image features-split-animate-sync">
        <div class="features-split-image-bg features-split-animate-sync"></div>
      </div>
    </div>
  </div>
</section>

<script>
  // Staggered animation for all elements
  document.addEventListener('DOMContentLoaded', function() {
    const animatedElements = document.querySelectorAll('.features-split-animate');
    const syncElements = document.querySelectorAll('.features-split-animate-sync');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }, index * 80);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    // Animate sync elements (image) with the title (index 1)
    const syncObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }, 80); // Same delay as title
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    animatedElements.forEach(element => {
      observer.observe(element);
    });

    syncElements.forEach(element => {
      syncObserver.observe(element);
    });
  });
</script>
