---
import './FeaturesSplitLeft.css';
import { type Locale, loadT } from '../../../i18n';

interface Props {
  lang: Locale;
}

const { lang } = Astro.props;
const t = await loadT(lang, ['features']);

// Fallback translations para features si el sistema no funciona
const featuresFallback = {
  es: {
    sucesiones: {
      title: "Sucesiones: planificación y tramitación integral",
      description: "Te acompañamos en herencias, testamentos y pactos sucesorios. Optimizamos la carga fiscal y prevenimos conflictos familiares. Gestión completa: desde documentación y liquidación del Impuesto de Sucesiones hasta inscripción registral."
    }
  },
  en: {
    sucesiones: {
      title: "Inheritance: comprehensive planning and processing",
      description: "We accompany you in inheritances, wills and succession agreements. We optimize the tax burden and prevent family conflicts. Complete management: from documentation and Inheritance Tax settlement to registry registration."
    }
  },
  ca: {
    sucesiones: {
      title: "Successions: planificació i tramitació integral",
      description: "T'acompanyem en herències, testaments i pactes successoris. Optimitzem la càrrega fiscal i prevenim conflictes familiars. Gestió completa: des de documentació i liquidació de l'Impost de Successions fins a inscripció registral."
    }
  }
};

// Función helper para obtener traducciones de features con fallback
function getFeaturesTranslation(key: string) {
  const translation = t(`features.${key}`);
  if (translation === `features.${key}`) {
    // Si no se encuentra la traducción, usar fallback
    const keys = key.split('.');
    let value = featuresFallback[lang];
    for (const k of keys) {
      value = value?.[k];
    }
    return value || key;
  }
  return translation;
}

const title = getFeaturesTranslation('sucesiones.title');
const description = getFeaturesTranslation('sucesiones.description');
---

<section class="features-split-reverse-section">
  <div class="container">
    <div class="features-split-reverse-grid">
      <!-- Left Column - Image -->
      <div class="features-split-reverse-image features-split-reverse-animate">
        <div class="features-split-reverse-image-bg features-split-reverse-animate"></div>
      </div>

      <!-- Right Column - Content -->
      <div class="features-split-reverse-content features-split-reverse-animate">
        <h2 class="features-split-reverse-title features-split-reverse-animate">{title}</h2>
        <p class="features-split-reverse-description features-split-reverse-animate">
          {description}
        </p>
      </div>
    </div>
  </div>
</section>

<script>
  // Staggered animation for all elements
  document.addEventListener('DOMContentLoaded', function() {
    const animatedElements = document.querySelectorAll('.features-split-reverse-animate');
    
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry, index) => {
        if (entry.isIntersecting) {
          setTimeout(() => {
            entry.target.style.opacity = '1';
            entry.target.style.transform = 'translateY(0)';
          }, index * 150);
        }
      });
    }, {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px'
    });

    animatedElements.forEach(element => {
      observer.observe(element);
    });
  });
</script>
